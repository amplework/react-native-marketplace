diff --git a/node_modules/react-native-calendar-strip/src/CalendarDay.js b/node_modules/react-native-calendar-strip/src/CalendarDay.js
index 9f4f95d..1d3bff4 100644
--- a/node_modules/react-native-calendar-strip/src/CalendarDay.js
+++ b/node_modules/react-native-calendar-strip/src/CalendarDay.js
@@ -510,9 +510,9 @@ class CalendarDay extends Component {
       );
     }
     const currectDay =
-      new Date(date).getDate() === new Date().getDate()
-      && new Date(date).getMonth() === new Date().getMonth()
-      && new Date(date).getFullYear() === new Date().getFullYear()
+      moment(date).date() === moment().date()
+      && moment(date).month() === moment().month()
+      && moment(date).year() === moment().year()
 
     return calendarAnimation && !scrollable ? (
       <Animated.View style={[
diff --git a/node_modules/react-native-calendar-strip/src/Scroller.js b/node_modules/react-native-calendar-strip/src/Scroller.js
index 551bf45..bdc8ae9 100644
--- a/node_modules/react-native-calendar-strip/src/Scroller.js
+++ b/node_modules/react-native-calendar-strip/src/Scroller.js
@@ -81,11 +81,21 @@ export default class CalendarScroller extends Component {
     let newState = {};
     let updateState = false;
 
+    const {
+      width,
+      height,
+      selectedDate
+    } = this.props.renderDayParams;
+
     if (this.props.renderDayParams.width !== prevProps.renderDayParams.width || this.props.renderDayParams.height !== prevProps.renderDayParams.height) {
       updateState = true;
       newState = this.updateLayout(this.props.renderDayParams);
     }
 
+    if (selectedDate !== prevProps.renderDayParams.selectedDate) {
+      this.scrollToDate(selectedDate);
+    }
+
     if (this.props.data !== prevProps.data) {
       updateState = true;
       newState = {...newState, ...this.updateDaysData(this.props.data)};
@@ -100,13 +110,13 @@ export default class CalendarScroller extends Component {
     if (this.state.visibleStartIndex === 0) {
       return;
     }
-    const newIndex = Math.max(this.state.visibleStartIndex - 30, 0);
+    const newIndex = Math.max(this.state.visibleStartIndex - this.state.numVisibleItems, 0);
     this.rlv.scrollToIndex(newIndex, true);
   }
 
   // Scroll right, guarding against end index.
   scrollRight = () => {
-    const newIndex = this.state.visibleStartIndex + 30;
+    const newIndex = this.state.visibleStartIndex + this.state.numVisibleItems;
     if (newIndex >= (this.state.numDays - 1)) {
       this.rlv.scrollToEnd(true); // scroll to the very end, including padding
       return;
@@ -116,7 +126,7 @@ export default class CalendarScroller extends Component {
 
   // Scroll to given date, and check against min and max date if available.
   scrollToDate = (date) => {
-    let targetDate = moment(date);
+    let targetDate = moment(date).subtract(Math.round(this.state.numVisibleItems / 2) - 1, "days");
     const {
       minDate,
       maxDate,
@@ -252,6 +262,53 @@ export default class CalendarScroller extends Component {
     });
   }
 
+  onScrollStart = (event) => {
+    const {onWeekScrollStart} = this.props;
+    const {prevStartDate, prevEndDate} = this.state;
+
+    if (onWeekScrollStart && prevStartDate && prevEndDate) {
+      onWeekScrollStart(prevStartDate.clone(), prevEndDate.clone());
+    }
+  }
+
+  onScrollEnd = () => {
+    const {onWeekScrollEnd} = this.props;
+    const {visibleStartDate, visibleEndDate, prevEndDate} = this.state;
+
+    if (onWeekScrollEnd && visibleStartDate && visibleEndDate) {
+      if (!visibleEndDate.isSame(prevEndDate, "day")) {
+        onWeekScrollEnd(visibleStartDate.clone(), visibleEndDate.clone());
+      }
+    }
+  }
+
+  onScrollBeginDrag = () => {
+    const {
+      onWeekScrollStart,
+      onWeekScrollEnd,
+    } = this.props;
+    // Prev dates required only if scroll callbacks are defined
+    if (!onWeekScrollStart && !onWeekScrollEnd) {
+      return;
+    }
+    const {
+      data,
+      visibleStartDate,
+      visibleEndDate,
+      visibleStartIndex,
+      visibleEndIndex,
+    } = this.state;
+    const prevStartDate = visibleStartDate ? visibleStartDate
+      : (data[visibleStartIndex] ? data[visibleStartIndex].date : moment());
+    const prevEndDate = visibleEndDate ? visibleEndDate
+      : (data[visibleEndIndex] ? data[visibleEndIndex].date : moment());
+
+    this.setState({
+      prevStartDate,
+      prevEndDate,
+    });
+  }
+
   onLayout = event => {
     let width = event.nativeEvent.layout.width;
     this.setState({
@@ -291,6 +348,9 @@ export default class CalendarScroller extends Component {
           scrollViewProps={{
             showsHorizontalScrollIndicator: false,
             contentContainerStyle: { paddingRight: this.state.itemWidth / 2 },
+            onMomentumScrollBegin: this.onScrollStart,
+            onMomentumScrollEnd: this.onScrollEnd,
+            onScrollBeginDrag: this.onScrollBeginDrag,
             ...pagingProps
           }}
         />
